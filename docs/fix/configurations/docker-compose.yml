version: '3.8'

services:
  # Golang Common 应用
  golang-common:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: golang-common
    ports:
      - "8080:8080"
      - "6060:6060"  # pprof
    environment:
      - GIN_MODE=release
      - CONFIG_PATH=/app/config/config.yaml
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - golang-common-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: golang-common-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - golang-common-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: golang-common-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=golang_common
      - POSTGRES_USER=golang_common
      - POSTGRES_PASSWORD=golang_common_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - golang-common-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U golang_common"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: golang-common-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - golang-common-network
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: golang-common-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - golang-common-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: golang-common-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - golang-common-network
    restart: unless-stopped

  # Consul 服务发现和配置
  consul:
    image: consul:latest
    container_name: golang-common-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul-data:/consul/data
      - ./config/consul.json:/consul/config/consul.json
    command: consul agent -server -bootstrap-expect=1 -client=0.0.0.0 -data-dir=/consul/data -config-file=/consul/config/consul.json
    networks:
      - golang-common-network
    restart: unless-stopped

  # Vault 密钥管理
  vault:
    image: vault:latest
    container_name: golang-common-vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=golang-common-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/file
    networks:
      - golang-common-network
    restart: unless-stopped

  # Elasticsearch 日志存储
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: golang-common-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - golang-common-network
    restart: unless-stopped

  # Kibana 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: golang-common-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - golang-common-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Logstash 日志处理
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: golang-common-logstash
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - golang-common-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: golang-common-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    networks:
      - golang-common-network
    restart: unless-stopped
    depends_on:
      - golang-common

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  consul-data:
    driver: local
  vault-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  golang-common-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 